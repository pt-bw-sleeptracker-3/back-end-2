const server = require('../server')
const request = require('supertest')
const db = require('../data/dbConfig')



beforeEach(() => {
    return db.migrate.rollback()
        .then(() => db.migrate.latest())
})

describe('Get all sleep data', () => {
    it('GET /api/sleep-data', async () => {
        const register = await request(server)
            .post('/api/auth/register')
            .send({username: 'chris', password: 'taco', name: 'chris', email: 'chris@test.com'})
        const login = await request(server)
            .post('/api/auth/login')
            .send({username: 'chris', password: 'taco'})
        const add = await request(server)
            .post('/api/sleep-data')
            .send({user_id: 1, date: '3/3/20', sleepStart: 12})
            .set('authorization', login.body.token)
        const res = await request(server)
            .get('/api/sleep-data')
            .set('authorization', login.body.token)
        expect(res.status).toBe(200)
        expect(res.type).toBe('application/json')
        expect(res.body).toHaveLength(1)
        expect(res.body[0]).toHaveProperty('id')
        expect(res.body[0]).toHaveProperty('date')
        expect(res.body[0]).toHaveProperty('sleepStart')
        expect(res.body[0]).toHaveProperty('sleepEnd')
        expect(res.body[0]).toHaveProperty('moodMorn')
        expect(res.body[0]).toHaveProperty('moodMid')
        expect(res.body[0]).toHaveProperty('moodNight')
        expect(res.body[0]).toHaveProperty('user_id')
    })
})

describe('Get sleep data by id', () => {
    it('GET /api/sleep-data/1', async () => {
        const register = await request(server)
            .post('/api/auth/register')
            .send({username: 'chris', password: 'taco', name: 'chris', email: 'chris@test.com'})
        const login = await request(server)
            .post('/api/auth/login')
            .send({username: 'chris', password: 'taco'})
        const add = await request(server)
            .post('/api/sleep-data')
            .send({user_id: 1, date: '3/3/20', sleepStart: 12})
            .set('authorization', login.body.token)
        const res = await request(server)
            .get('/api/sleep-data/1')
            .set('authorization', login.body.token)
        expect(res.status).toBe(200)
        expect(res.type).toBe('application/json')
        expect(res.body).toMatchObject({id: 1})
        expect(res.body).toHaveProperty('date')
        expect(res.body).toHaveProperty('sleepStart')
        expect(res.body).toHaveProperty('sleepEnd')
        expect(res.body).toHaveProperty('moodMorn')
        expect(res.body).toHaveProperty('moodMid')
        expect(res.body).toHaveProperty('moodNight')
        expect(res.body).toHaveProperty('user_id')
    })
})

describe('Get sleep data by user id', () => {
    it('GET /api/sleep-data/user/1', async () => {
        const register = await request(server)
            .post('/api/auth/register')
            .send({username: 'chris', password: 'taco', name: 'chris', email: 'chris@test.com'})
        const login = await request(server)
            .post('/api/auth/login')
            .send({username: 'chris', password: 'taco'})
        const add = await request(server)
            .post('/api/sleep-data')
            .send({user_id: 1, date: '3/3/20', sleepStart: 12})
            .set('authorization', login.body.token)
        const res = await request(server)
            .get('/api/sleep-data/user/1')
            .set('authorization', login.body.token)
        expect(res.status).toBe(200)
        expect(res.type).toBe('application/json')
        expect(res.body).toHaveLength(1)
        expect(res.body[0]).toMatchObject({id: 1})
        expect(res.body[0]).toHaveProperty('date')
        expect(res.body[0]).toHaveProperty('sleepStart')
        expect(res.body[0]).toHaveProperty('sleepEnd')
        expect(res.body[0]).toHaveProperty('moodMorn')
        expect(res.body[0]).toHaveProperty('moodMid')
        expect(res.body[0]).toHaveProperty('moodNight')
        expect(res.body[0]).toHaveProperty('user_id')
    })
})

describe('Add new sleep data', () => {
    it('POST /api/sleep-data', async () => {
        const register = await request(server)
            .post('/api/auth/register')
            .send({username: 'chris', password: 'taco', name: 'chris', email: 'chris@test.com'})
        const login = await request(server)
            .post('/api/auth/login')
            .send({username: 'chris', password: 'taco'})
        const res = await request(server)
            .post('/api/sleep-data')
            .send({user_id: 1, date: '3/3/20', sleepStart: 12})
            .set('authorization', login.body.token)
        expect(res.status).toBe(201)
        expect(res.type).toBe('application/json')
        expect(res.body).toMatchObject({message: 'success'})
        expect(res.body).toHaveProperty('data')
        expect(res.body.data).toMatchObject({id: 1})
        expect(res.body.data).toHaveProperty('date')
        expect(res.body.data).toHaveProperty('sleepStart')
        expect(res.body.data).toHaveProperty('sleepEnd')
        expect(res.body.data).toHaveProperty('moodMorn')
        expect(res.body.data).toHaveProperty('moodMid')
        expect(res.body.data).toHaveProperty('moodNight')
        expect(res.body.data).toHaveProperty('user_id')
    })
})

describe('Edit existing sleep data by id', () => {
    it('PUT /api/sleep-data/1', async () => {
        const register = await request(server)
            .post('/api/auth/register')
            .send({username: 'chris', password: 'taco', name: 'chris', email: 'chris@test.com'})
        const login = await request(server)
            .post('/api/auth/login')
            .send({username: 'chris', password: 'taco'})
        const add = await request(server)
            .post('/api/sleep-data')
            .send({user_id: 1, date: '3/3/20', sleepStart: 12})
            .set('authorization', login.body.token)
        const res = await request(server)
            .put('/api/sleep-data/1')
            .send({user_id: 1, date: '3/3/21', sleepStart: 13})
            .set('authorization', login.body.token)
        expect(res.status).toBe(203)
        expect(res.type).toBe('application/json')
        expect(res.body).toMatchObject({message: 'update success'})
        expect(res.body).toHaveProperty('data')
        expect(res.body.data).toMatchObject({id: 1})
        expect(res.body.data).toMatchObject({date: '3/3/21'})
        expect(res.body.data).toMatchObject({sleepStart: 13})
        expect(res.body.data).toHaveProperty('date')
        expect(res.body.data).toHaveProperty('sleepStart')
        expect(res.body.data).toHaveProperty('sleepEnd')
        expect(res.body.data).toHaveProperty('moodMorn')
        expect(res.body.data).toHaveProperty('moodMid')
        expect(res.body.data).toHaveProperty('moodNight')
        expect(res.body.data).toHaveProperty('user_id')
    })
})

describe('Delete existing sleep data by id', () => {
    it('DELETE /api/sleep-data/1', async () => {
        const register = await request(server)
            .post('/api/auth/register')
            .send({username: 'chris', password: 'taco', name: 'chris', email: 'chris@test.com'})
        const login = await request(server)
            .post('/api/auth/login')
            .send({username: 'chris', password: 'taco'})
        const add = await request(server)
            .post('/api/sleep-data')
            .send({user_id: 1, date: '3/3/20', sleepStart: 12})
            .set('authorization', login.body.token)
        const res = await request(server)
            .del('/api/sleep-data/1')
            .set('authorization', login.body.token)
        expect(res.status).toBe(203)
        expect(res.type).toBe('application/json')
        expect(res.body).toMatchObject({message: 'deleted successfully'})
        expect(res.body).toHaveProperty('recordsRemoved')
    })
})